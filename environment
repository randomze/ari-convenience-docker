create_image() {
    ROS_VERSION=$1
    SCRIPT_PATH=$(cd "$(dirname ${BASH_SOURCE[0]})"; pwd -P)
    if [ "$(docker images | grep ari-$ROS_VERSION)" ]; then
        docker rmi ari-$ROS_VERSION
    fi
    docker build -t ari-$ROS_VERSION --build-arg USERNAME=$USER --build-arg USERID=$UID --build-arg GROUPID=$(id -g) -f $SCRIPT_PATH/images/Dockerfile.$ROS_VERSION $SCRIPT_PATH/images
}

start_container () {
    CONTAINER_NAME=$1
    if [ ! "$(docker ps | grep $CONTAINER_NAME)" ]; then
        docker start $CONTAINER_NAME
    fi
}

close_container () {
    CONTAINER_NAME=$1
    docker stop $CONTAINER_NAME
}

open_terminal () {
    CONTAINER_NAME=$1
    xhost +
    docker exec -it $CONTAINER_NAME env TERM=xterm-256color /bin/bash
}

run_command () {
    CONTAINER_NAME=$1
    docker exec $CONTAINER_NAME ${@:2}
}

make_container () {
    ROS_VERSION=$1
    CONTAINER_NAME=$2
    SOURCE_FOLDER=$3
    BRIDGE_FOLDER=$4
    create_image $ROS_VERSION

    GPU_STRING=""
    if [ $(nvidia-smi) -eq 0 ]; then
        GPU_STRING="--gpus=all"
    fi

    docker run $GPU_STRING --net=host -i -t -d -e DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix -v $SOURCE_FOLDER:/home/$USER/catkin_ws/src -v $BRIDGE_FOLDER:/home/$USER/bridge --name $CONTAINER_NAME ari-$ROS_VERSION /bin/bash
    close_container $CONTAINER_NAME
}

delete_container () {
    CONTAINER_NAME=$1
    if [ "$(docker ps | grep $CONTAINER_NAME)" ]; then
        close_container $CONTAINER_NAME
    fi
    docker rm $CONTAINER_NAME
}
