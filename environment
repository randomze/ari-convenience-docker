create_image() {
    ROS_VERSION=$1
    SCRIPT_PATH=$(cd "$(dirname ${BASH_SOURCE[0]})"; pwd -P)
    if [ "$(docker images | grep ari-$ROS_VERSION)" ]; then
        docker rmi ari-$ROS_VERSION
    fi

    # Providing some extract flexibility for reasons
    IMAGES_DIRECTORY=${2:-"$SCRIPT_PATH/images"}
    echo "Building image for $ROS_VERSION with IMAGES_DIRECTORY=$IMAGES_DIRECTORY"
    docker build -t ari-$ROS_VERSION --build-arg USERNAME=$USER --build-arg USERID=$UID --build-arg GROUPID=$(id -g) -f $IMAGES_DIRECTORY/Dockerfile.$ROS_VERSION $IMAGES_DIRECTORY
}

start_container () {
    CONTAINER_NAME=$1
    if [ ! "$(docker ps | grep $CONTAINER_NAME)" ]; then
        docker start $CONTAINER_NAME
    fi
}

close_container () {
    CONTAINER_NAME=$1
    docker stop $CONTAINER_NAME
}

open_terminal () {
    CONTAINER_NAME=$1
    xhost +
    docker exec -it $CONTAINER_NAME env TERM=xterm-256color /bin/bash
}

run_command () {
    CONTAINER_NAME=$1
    docker exec -t $CONTAINER_NAME "${@:2}"
}

make_container () {
    ROS_VERSION=$1
    CONTAINER_NAME=$2
    SOURCE_FOLDER=$3
    BRIDGE_FOLDER=$4

    if [ "$(docker ps -a | grep $CONTAINER_NAME)" ]; then
        echo "$CONTAINER_NAME container already exists. Skipping creation."
        echo "If you wish to create a new container, manually run 'delete_container $CONTAINER_NAME'"
    else
        GPU_STRING=""
        if nvidia-smi ; then
            GPU_STRING="--gpus=all"
        fi

        if [ "$(docker images | grep ari-$ROS_VERSION)" ]; then
            echo "Image for this container already exists."
            echo "If you wish for it to be rebuilt, manually delete it with 'docker rmi ari-$ROS_VERSION'"
        else
            create_image $ROS_VERSION
        fi
        docker run $GPU_STRING --net=host -i -t -d -e DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix -v $SOURCE_FOLDER:/home/$USER/catkin_ws/src -v $BRIDGE_FOLDER:/home/$USER/bridge --name $CONTAINER_NAME ari-$ROS_VERSION /bin/bash
        close_container $CONTAINER_NAME
    fi
}

# Unadvertised version for manually doing things
make_container_adv () {
    ROS_VERSION=$1
    CONTAINER_NAME=$2

    if [ "$(docker ps -a | grep $CONTAINER_NAME)" ]; then
        echo "$CONTAINER_NAME container already exists. Skipping creation."
        echo "If you wish to create a new container, manually run 'delete_container $CONTAINER_NAME'"
    else
        GPU_STRING=""
        if nvidia-smi ; then
            GPU_STRING="--gpus=all"
        fi

        ERROR=0
        MOUNTS_STRING=""

        for j in $(seq 3 2 $#); do
           eval "source_folder=\${$j}"
           eval "target_folder=\${$((j+1))}"

           if [[ $target_folder == "" ]]; then
              echo "Must specify target_folder"
              ERROR=1
           fi

           MOUNTS_STRING="$MOUNTS_STRING -v $source_folder:$target_folder"
        done
        
        if [[ $ERROR == 1 ]] ; then
           return
        fi

        if [ "$(docker images | grep ari-$ROS_VERSION)" ]; then
            echo "Image for this container already exists."
            echo "If you wish for it to be rebuilt, manually delete it with 'docker rmi ari-$ROS_VERSION'"
        else
            create_image $ROS_VERSION
        fi
        docker run $GPU_STRING --net=host -i -t -d -e DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix $MOUNTS_STRING --name $CONTAINER_NAME ari-$ROS_VERSION /bin/bash
        close_container $CONTAINER_NAME
    fi
}

delete_container () {
    CONTAINER_NAME=$1
    if [ "$(docker ps | grep $CONTAINER_NAME)" ]; then
        close_container $CONTAINER_NAME
    fi
    docker rm $CONTAINER_NAME
}
